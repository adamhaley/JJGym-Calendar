<?
/**
*Database wrapper class.
*Use this class for all database interactions.
*For the time being MYSQL is the only supported db.
*Add support for new engine or modify class if db engine changes
*@package db
*@category Database
*/
class db{
	var $dbc;
	var $result;
	var $numrows;
	
	/**
	*Constructor. Takes HOST,USER,PASS,DBNAME
	*@param string $host hostname
	*@param string $user username
	*@param string $pass password
	*@param string $dbname database name
	*Connects to DB and selects DB
	*/
	function db($host,$user,$pass,$dbname){
		$this->dbc = mysql_connect($host,$user,$pass);
		$this->result = '';
		mysql_select_db("$dbname");
		return;	
	}
	
	/**
	*Returns result row as associative array
	*@return asscociative array result of mysql_fetch_assoc()
	*/
	function fetchrow(){
		$res = $this->result;
		
		if(is_resource($res)){
			return mysql_fetch_assoc($res);
		}
	
		return array();
	}
	
	/**
	*Runs query. 
	*@param string $sql sql query
	*@return dbresult result
	*/
	function query($sql){
		global $message;
		global $numqueries;
		$numqueries++;
		
		if($_SESSION['debug'] == 'true' || $_REQUEST['sql'] == 'true'){
			$messagesql = preg_replace("/\n/","\n",$sql);
			$message->add("warning",utf8_encode($messagesql) . " \n");
		}
		if(!$this->result = mysql_query($sql)){
			$message->add("error","MYSQL Error: " . mysql_error());		
				//echo "Set error: " . mysql_error();
		}
		//echo $sql . "\n\n";
		//echo mysql_error();
		
		return $this->result;
	}
	
	/**
	*Returns an array of arrays, each representing a result row. 
	*@return array result as an array of arrays
	*/
	function fetchallrows(){
		$i=0;
		$rows = array();
		
		if(is_resource($this->result)){
			if(mysql_num_rows($this->result)>0){
				mysql_data_seek($this->result,0);
			}
		
			while($row = mysql_fetch_assoc($this->result)){
				$rows[] = $row;
				$i++;
			}
		}
		return $rows;
	
	}	

	/**
	*Selects a database. 
	*@param db $db database name
	*/
	function select_db($db){
		return mysql_select_db($db);	
	}
	
	/**
	*Returns auto increment id of last query
	*@return int id
	*/
	function insert_id(){
		return mysql_insert_id();	
	}
}
/**
*@package dbresult
*@category Database
*/
class dbresult{
	var $sql;
	var $row;
	var $allrows;
	
	function dbresult($sql=''){
		global $db;
		
	
		$this->sql = $sql;
		
		//query the database
		$db->query($sql);
		
		//set row to fetchrow
		$this->row = $db->fetchrow();
		
		//set allrows to fetchallrows
		$this->allrows = $db->fetchallrows();
	}

	/**
	*accessor. sets variable with name $prop to $value
	*@param string $prop name of class variable to set
	*@param string $value value to set the property to.
	*/
	function set_prop($prop,$value){
		eval("\$this->$prop = $value;");		
	}
	
	 /**
        *accessor. gets value of variable with name $pro
        *@return value of prop
	*/
	function get_prop($prop){
		eval("\$value = \$this->$prop;");
		return $value;
	}
	 /**
        *Gets the row as an array
        *@return array row
        */
	function fetchrow(){
		return $this->get_prop('row');	
	}
	 /**
        *Gets all rows as an array of arrays
        *@return array all rows
        */
	function fetchallrows(){
		return $this->get_prop('allrows');	
	}
}

/**
*@package dbcache
*@category Database
*/
class dbcache{
	var $cachearray;
	function dbcache(){
		
		$this->cachearray = array();
		
	}	
	/**
	*Checks the cache array to see if this sql query has been run. If so, return the result of previous execution. else call _add($sql)
	*@param string $sql sql query
	*/
	function query($sql){
		$array = $this->cachearray;
	
		foreach($this->cachearray as $res){
			if($res->get_prop('sql') == $sql){
				//echo "loading $sql  from cache <br />";
				return $res;	
			}
		}
		return $this->_add($sql);	
	}
	
	/**
	*@param string $sql sql query
	*Used internally by the query() function
	*creates a dbresult object, adds the query to the cache array, and returns the result 
	*/
	function _add($sql){
		
		$res = new dbresult($sql);	
		$this->cachearray[] = $res;
		return $res;
	}
}
?>
